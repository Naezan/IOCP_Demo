// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ShooterProtocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ShooterProtocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ShooterProtocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ShooterProtocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ShooterProtocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ShooterProtocol_2eproto;
namespace Shooter {
class PAnimState;
struct PAnimStateDefaultTypeInternal;
extern PAnimStateDefaultTypeInternal _PAnimState_default_instance_;
class PClientId;
struct PClientIdDefaultTypeInternal;
extern PClientIdDefaultTypeInternal _PClientId_default_instance_;
class PEquipment;
struct PEquipmentDefaultTypeInternal;
extern PEquipmentDefaultTypeInternal _PEquipment_default_instance_;
class PMovement;
struct PMovementDefaultTypeInternal;
extern PMovementDefaultTypeInternal _PMovement_default_instance_;
class PPawnStatus;
struct PPawnStatusDefaultTypeInternal;
extern PPawnStatusDefaultTypeInternal _PPawnStatus_default_instance_;
class PRotator;
struct PRotatorDefaultTypeInternal;
extern PRotatorDefaultTypeInternal _PRotator_default_instance_;
class PVector;
struct PVectorDefaultTypeInternal;
extern PVectorDefaultTypeInternal _PVector_default_instance_;
class PWeapon;
struct PWeaponDefaultTypeInternal;
extern PWeaponDefaultTypeInternal _PWeapon_default_instance_;
}  // namespace Shooter
PROTOBUF_NAMESPACE_OPEN
template<> ::Shooter::PAnimState* Arena::CreateMaybeMessage<::Shooter::PAnimState>(Arena*);
template<> ::Shooter::PClientId* Arena::CreateMaybeMessage<::Shooter::PClientId>(Arena*);
template<> ::Shooter::PEquipment* Arena::CreateMaybeMessage<::Shooter::PEquipment>(Arena*);
template<> ::Shooter::PMovement* Arena::CreateMaybeMessage<::Shooter::PMovement>(Arena*);
template<> ::Shooter::PPawnStatus* Arena::CreateMaybeMessage<::Shooter::PPawnStatus>(Arena*);
template<> ::Shooter::PRotator* Arena::CreateMaybeMessage<::Shooter::PRotator>(Arena*);
template<> ::Shooter::PVector* Arena::CreateMaybeMessage<::Shooter::PVector>(Arena*);
template<> ::Shooter::PWeapon* Arena::CreateMaybeMessage<::Shooter::PWeapon>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Shooter {

// ===================================================================

class PVector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Shooter.PVector) */ {
 public:
  inline PVector() : PVector(nullptr) {}
  ~PVector() override;
  explicit PROTOBUF_CONSTEXPR PVector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PVector(const PVector& from);
  PVector(PVector&& from) noexcept
    : PVector() {
    *this = ::std::move(from);
  }

  inline PVector& operator=(const PVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline PVector& operator=(PVector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PVector& default_instance() {
    return *internal_default_instance();
  }
  static inline const PVector* internal_default_instance() {
    return reinterpret_cast<const PVector*>(
               &_PVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PVector& a, PVector& b) {
    a.Swap(&b);
  }
  inline void Swap(PVector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PVector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PVector>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PVector& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PVector& from) {
    PVector::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PVector* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Shooter.PVector";
  }
  protected:
  explicit PVector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float X = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float Y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float Z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:Shooter.PVector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float x_;
    float y_;
    float z_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ShooterProtocol_2eproto;
};
// -------------------------------------------------------------------

class PRotator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Shooter.PRotator) */ {
 public:
  inline PRotator() : PRotator(nullptr) {}
  ~PRotator() override;
  explicit PROTOBUF_CONSTEXPR PRotator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PRotator(const PRotator& from);
  PRotator(PRotator&& from) noexcept
    : PRotator() {
    *this = ::std::move(from);
  }

  inline PRotator& operator=(const PRotator& from) {
    CopyFrom(from);
    return *this;
  }
  inline PRotator& operator=(PRotator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PRotator& default_instance() {
    return *internal_default_instance();
  }
  static inline const PRotator* internal_default_instance() {
    return reinterpret_cast<const PRotator*>(
               &_PRotator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PRotator& a, PRotator& b) {
    a.Swap(&b);
  }
  inline void Swap(PRotator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PRotator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PRotator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PRotator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PRotator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PRotator& from) {
    PRotator::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PRotator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Shooter.PRotator";
  }
  protected:
  explicit PRotator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollFieldNumber = 1,
    kPitchFieldNumber = 2,
    kYawFieldNumber = 3,
  };
  // float Roll = 1;
  void clear_roll();
  float roll() const;
  void set_roll(float value);
  private:
  float _internal_roll() const;
  void _internal_set_roll(float value);
  public:

  // float Pitch = 2;
  void clear_pitch();
  float pitch() const;
  void set_pitch(float value);
  private:
  float _internal_pitch() const;
  void _internal_set_pitch(float value);
  public:

  // float Yaw = 3;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // @@protoc_insertion_point(class_scope:Shooter.PRotator)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float roll_;
    float pitch_;
    float yaw_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ShooterProtocol_2eproto;
};
// -------------------------------------------------------------------

class PEquipment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Shooter.PEquipment) */ {
 public:
  inline PEquipment() : PEquipment(nullptr) {}
  ~PEquipment() override;
  explicit PROTOBUF_CONSTEXPR PEquipment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PEquipment(const PEquipment& from);
  PEquipment(PEquipment&& from) noexcept
    : PEquipment() {
    *this = ::std::move(from);
  }

  inline PEquipment& operator=(const PEquipment& from) {
    CopyFrom(from);
    return *this;
  }
  inline PEquipment& operator=(PEquipment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PEquipment& default_instance() {
    return *internal_default_instance();
  }
  static inline const PEquipment* internal_default_instance() {
    return reinterpret_cast<const PEquipment*>(
               &_PEquipment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PEquipment& a, PEquipment& b) {
    a.Swap(&b);
  }
  inline void Swap(PEquipment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PEquipment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PEquipment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PEquipment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PEquipment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PEquipment& from) {
    PEquipment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PEquipment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Shooter.PEquipment";
  }
  protected:
  explicit PEquipment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEquipmentIndexFieldNumber = 1,
  };
  // optional uint32 EquipmentIndex = 1;
  bool has_equipmentindex() const;
  private:
  bool _internal_has_equipmentindex() const;
  public:
  void clear_equipmentindex();
  uint32_t equipmentindex() const;
  void set_equipmentindex(uint32_t value);
  private:
  uint32_t _internal_equipmentindex() const;
  void _internal_set_equipmentindex(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Shooter.PEquipment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t equipmentindex_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ShooterProtocol_2eproto;
};
// -------------------------------------------------------------------

class PWeapon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Shooter.PWeapon) */ {
 public:
  inline PWeapon() : PWeapon(nullptr) {}
  ~PWeapon() override;
  explicit PROTOBUF_CONSTEXPR PWeapon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PWeapon(const PWeapon& from);
  PWeapon(PWeapon&& from) noexcept
    : PWeapon() {
    *this = ::std::move(from);
  }

  inline PWeapon& operator=(const PWeapon& from) {
    CopyFrom(from);
    return *this;
  }
  inline PWeapon& operator=(PWeapon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PWeapon& default_instance() {
    return *internal_default_instance();
  }
  static inline const PWeapon* internal_default_instance() {
    return reinterpret_cast<const PWeapon*>(
               &_PWeapon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PWeapon& a, PWeapon& b) {
    a.Swap(&b);
  }
  inline void Swap(PWeapon* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PWeapon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PWeapon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PWeapon>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PWeapon& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PWeapon& from) {
    PWeapon::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PWeapon* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Shooter.PWeapon";
  }
  protected:
  explicit PWeapon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWantToFireFieldNumber = 1,
    kWeaponStateFieldNumber = 2,
    kAmmoCountFieldNumber = 3,
  };
  // optional bool WantToFire = 1;
  bool has_wanttofire() const;
  private:
  bool _internal_has_wanttofire() const;
  public:
  void clear_wanttofire();
  bool wanttofire() const;
  void set_wanttofire(bool value);
  private:
  bool _internal_wanttofire() const;
  void _internal_set_wanttofire(bool value);
  public:

  // optional uint32 WeaponState = 2;
  bool has_weaponstate() const;
  private:
  bool _internal_has_weaponstate() const;
  public:
  void clear_weaponstate();
  uint32_t weaponstate() const;
  void set_weaponstate(uint32_t value);
  private:
  uint32_t _internal_weaponstate() const;
  void _internal_set_weaponstate(uint32_t value);
  public:

  // optional uint32 AmmoCount = 3;
  bool has_ammocount() const;
  private:
  bool _internal_has_ammocount() const;
  public:
  void clear_ammocount();
  uint32_t ammocount() const;
  void set_ammocount(uint32_t value);
  private:
  uint32_t _internal_ammocount() const;
  void _internal_set_ammocount(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Shooter.PWeapon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool wanttofire_;
    uint32_t weaponstate_;
    uint32_t ammocount_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ShooterProtocol_2eproto;
};
// -------------------------------------------------------------------

class PClientId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Shooter.PClientId) */ {
 public:
  inline PClientId() : PClientId(nullptr) {}
  ~PClientId() override;
  explicit PROTOBUF_CONSTEXPR PClientId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PClientId(const PClientId& from);
  PClientId(PClientId&& from) noexcept
    : PClientId() {
    *this = ::std::move(from);
  }

  inline PClientId& operator=(const PClientId& from) {
    CopyFrom(from);
    return *this;
  }
  inline PClientId& operator=(PClientId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PClientId& default_instance() {
    return *internal_default_instance();
  }
  static inline const PClientId* internal_default_instance() {
    return reinterpret_cast<const PClientId*>(
               &_PClientId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PClientId& a, PClientId& b) {
    a.Swap(&b);
  }
  inline void Swap(PClientId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PClientId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PClientId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PClientId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PClientId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PClientId& from) {
    PClientId::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PClientId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Shooter.PClientId";
  }
  protected:
  explicit PClientId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // uint32 Index = 1;
  void clear_index();
  uint32_t index() const;
  void set_index(uint32_t value);
  private:
  uint32_t _internal_index() const;
  void _internal_set_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:Shooter.PClientId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ShooterProtocol_2eproto;
};
// -------------------------------------------------------------------

class PPawnStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Shooter.PPawnStatus) */ {
 public:
  inline PPawnStatus() : PPawnStatus(nullptr) {}
  ~PPawnStatus() override;
  explicit PROTOBUF_CONSTEXPR PPawnStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PPawnStatus(const PPawnStatus& from);
  PPawnStatus(PPawnStatus&& from) noexcept
    : PPawnStatus() {
    *this = ::std::move(from);
  }

  inline PPawnStatus& operator=(const PPawnStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline PPawnStatus& operator=(PPawnStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PPawnStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const PPawnStatus* internal_default_instance() {
    return reinterpret_cast<const PPawnStatus*>(
               &_PPawnStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PPawnStatus& a, PPawnStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(PPawnStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PPawnStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PPawnStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PPawnStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PPawnStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PPawnStatus& from) {
    PPawnStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PPawnStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Shooter.PPawnStatus";
  }
  protected:
  explicit PPawnStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kEquipInfoFieldNumber = 3,
    kWeaponInfoFieldNumber = 4,
    kHealthFieldNumber = 2,
  };
  // .Shooter.PClientId Id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::Shooter::PClientId& id() const;
  PROTOBUF_NODISCARD ::Shooter::PClientId* release_id();
  ::Shooter::PClientId* mutable_id();
  void set_allocated_id(::Shooter::PClientId* id);
  private:
  const ::Shooter::PClientId& _internal_id() const;
  ::Shooter::PClientId* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::Shooter::PClientId* id);
  ::Shooter::PClientId* unsafe_arena_release_id();

  // optional .Shooter.PEquipment EquipInfo = 3;
  bool has_equipinfo() const;
  private:
  bool _internal_has_equipinfo() const;
  public:
  void clear_equipinfo();
  const ::Shooter::PEquipment& equipinfo() const;
  PROTOBUF_NODISCARD ::Shooter::PEquipment* release_equipinfo();
  ::Shooter::PEquipment* mutable_equipinfo();
  void set_allocated_equipinfo(::Shooter::PEquipment* equipinfo);
  private:
  const ::Shooter::PEquipment& _internal_equipinfo() const;
  ::Shooter::PEquipment* _internal_mutable_equipinfo();
  public:
  void unsafe_arena_set_allocated_equipinfo(
      ::Shooter::PEquipment* equipinfo);
  ::Shooter::PEquipment* unsafe_arena_release_equipinfo();

  // optional .Shooter.PWeapon WeaponInfo = 4;
  bool has_weaponinfo() const;
  private:
  bool _internal_has_weaponinfo() const;
  public:
  void clear_weaponinfo();
  const ::Shooter::PWeapon& weaponinfo() const;
  PROTOBUF_NODISCARD ::Shooter::PWeapon* release_weaponinfo();
  ::Shooter::PWeapon* mutable_weaponinfo();
  void set_allocated_weaponinfo(::Shooter::PWeapon* weaponinfo);
  private:
  const ::Shooter::PWeapon& _internal_weaponinfo() const;
  ::Shooter::PWeapon* _internal_mutable_weaponinfo();
  public:
  void unsafe_arena_set_allocated_weaponinfo(
      ::Shooter::PWeapon* weaponinfo);
  ::Shooter::PWeapon* unsafe_arena_release_weaponinfo();

  // optional float Health = 2;
  bool has_health() const;
  private:
  bool _internal_has_health() const;
  public:
  void clear_health();
  float health() const;
  void set_health(float value);
  private:
  float _internal_health() const;
  void _internal_set_health(float value);
  public:

  // @@protoc_insertion_point(class_scope:Shooter.PPawnStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Shooter::PClientId* id_;
    ::Shooter::PEquipment* equipinfo_;
    ::Shooter::PWeapon* weaponinfo_;
    float health_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ShooterProtocol_2eproto;
};
// -------------------------------------------------------------------

class PMovement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Shooter.PMovement) */ {
 public:
  inline PMovement() : PMovement(nullptr) {}
  ~PMovement() override;
  explicit PROTOBUF_CONSTEXPR PMovement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PMovement(const PMovement& from);
  PMovement(PMovement&& from) noexcept
    : PMovement() {
    *this = ::std::move(from);
  }

  inline PMovement& operator=(const PMovement& from) {
    CopyFrom(from);
    return *this;
  }
  inline PMovement& operator=(PMovement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PMovement& default_instance() {
    return *internal_default_instance();
  }
  static inline const PMovement* internal_default_instance() {
    return reinterpret_cast<const PMovement*>(
               &_PMovement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PMovement& a, PMovement& b) {
    a.Swap(&b);
  }
  inline void Swap(PMovement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PMovement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PMovement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PMovement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PMovement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PMovement& from) {
    PMovement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PMovement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Shooter.PMovement";
  }
  protected:
  explicit PMovement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kLocFieldNumber = 2,
    kRotFieldNumber = 3,
    kVelFieldNumber = 4,
  };
  // .Shooter.PClientId Id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::Shooter::PClientId& id() const;
  PROTOBUF_NODISCARD ::Shooter::PClientId* release_id();
  ::Shooter::PClientId* mutable_id();
  void set_allocated_id(::Shooter::PClientId* id);
  private:
  const ::Shooter::PClientId& _internal_id() const;
  ::Shooter::PClientId* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::Shooter::PClientId* id);
  ::Shooter::PClientId* unsafe_arena_release_id();

  // optional .Shooter.PVector Loc = 2;
  bool has_loc() const;
  private:
  bool _internal_has_loc() const;
  public:
  void clear_loc();
  const ::Shooter::PVector& loc() const;
  PROTOBUF_NODISCARD ::Shooter::PVector* release_loc();
  ::Shooter::PVector* mutable_loc();
  void set_allocated_loc(::Shooter::PVector* loc);
  private:
  const ::Shooter::PVector& _internal_loc() const;
  ::Shooter::PVector* _internal_mutable_loc();
  public:
  void unsafe_arena_set_allocated_loc(
      ::Shooter::PVector* loc);
  ::Shooter::PVector* unsafe_arena_release_loc();

  // optional .Shooter.PRotator Rot = 3;
  bool has_rot() const;
  private:
  bool _internal_has_rot() const;
  public:
  void clear_rot();
  const ::Shooter::PRotator& rot() const;
  PROTOBUF_NODISCARD ::Shooter::PRotator* release_rot();
  ::Shooter::PRotator* mutable_rot();
  void set_allocated_rot(::Shooter::PRotator* rot);
  private:
  const ::Shooter::PRotator& _internal_rot() const;
  ::Shooter::PRotator* _internal_mutable_rot();
  public:
  void unsafe_arena_set_allocated_rot(
      ::Shooter::PRotator* rot);
  ::Shooter::PRotator* unsafe_arena_release_rot();

  // optional .Shooter.PVector Vel = 4;
  bool has_vel() const;
  private:
  bool _internal_has_vel() const;
  public:
  void clear_vel();
  const ::Shooter::PVector& vel() const;
  PROTOBUF_NODISCARD ::Shooter::PVector* release_vel();
  ::Shooter::PVector* mutable_vel();
  void set_allocated_vel(::Shooter::PVector* vel);
  private:
  const ::Shooter::PVector& _internal_vel() const;
  ::Shooter::PVector* _internal_mutable_vel();
  public:
  void unsafe_arena_set_allocated_vel(
      ::Shooter::PVector* vel);
  ::Shooter::PVector* unsafe_arena_release_vel();

  // @@protoc_insertion_point(class_scope:Shooter.PMovement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Shooter::PClientId* id_;
    ::Shooter::PVector* loc_;
    ::Shooter::PRotator* rot_;
    ::Shooter::PVector* vel_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ShooterProtocol_2eproto;
};
// -------------------------------------------------------------------

class PAnimState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Shooter.PAnimState) */ {
 public:
  inline PAnimState() : PAnimState(nullptr) {}
  ~PAnimState() override;
  explicit PROTOBUF_CONSTEXPR PAnimState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PAnimState(const PAnimState& from);
  PAnimState(PAnimState&& from) noexcept
    : PAnimState() {
    *this = ::std::move(from);
  }

  inline PAnimState& operator=(const PAnimState& from) {
    CopyFrom(from);
    return *this;
  }
  inline PAnimState& operator=(PAnimState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PAnimState& default_instance() {
    return *internal_default_instance();
  }
  static inline const PAnimState* internal_default_instance() {
    return reinterpret_cast<const PAnimState*>(
               &_PAnimState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PAnimState& a, PAnimState& b) {
    a.Swap(&b);
  }
  inline void Swap(PAnimState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PAnimState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PAnimState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PAnimState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PAnimState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PAnimState& from) {
    PAnimState::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PAnimState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Shooter.PAnimState";
  }
  protected:
  explicit PAnimState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kAimYawFieldNumber = 2,
    kAimPitchFieldNumber = 3,
  };
  // .Shooter.PClientId Id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::Shooter::PClientId& id() const;
  PROTOBUF_NODISCARD ::Shooter::PClientId* release_id();
  ::Shooter::PClientId* mutable_id();
  void set_allocated_id(::Shooter::PClientId* id);
  private:
  const ::Shooter::PClientId& _internal_id() const;
  ::Shooter::PClientId* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::Shooter::PClientId* id);
  ::Shooter::PClientId* unsafe_arena_release_id();

  // optional float AimYaw = 2;
  bool has_aimyaw() const;
  private:
  bool _internal_has_aimyaw() const;
  public:
  void clear_aimyaw();
  float aimyaw() const;
  void set_aimyaw(float value);
  private:
  float _internal_aimyaw() const;
  void _internal_set_aimyaw(float value);
  public:

  // optional float AimPitch = 3;
  bool has_aimpitch() const;
  private:
  bool _internal_has_aimpitch() const;
  public:
  void clear_aimpitch();
  float aimpitch() const;
  void set_aimpitch(float value);
  private:
  float _internal_aimpitch() const;
  void _internal_set_aimpitch(float value);
  public:

  // @@protoc_insertion_point(class_scope:Shooter.PAnimState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::Shooter::PClientId* id_;
    float aimyaw_;
    float aimpitch_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_ShooterProtocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PVector

// float X = 1;
inline void PVector::clear_x() {
  _impl_.x_ = 0;
}
inline float PVector::_internal_x() const {
  return _impl_.x_;
}
inline float PVector::x() const {
  // @@protoc_insertion_point(field_get:Shooter.PVector.X)
  return _internal_x();
}
inline void PVector::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void PVector::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Shooter.PVector.X)
}

// float Y = 2;
inline void PVector::clear_y() {
  _impl_.y_ = 0;
}
inline float PVector::_internal_y() const {
  return _impl_.y_;
}
inline float PVector::y() const {
  // @@protoc_insertion_point(field_get:Shooter.PVector.Y)
  return _internal_y();
}
inline void PVector::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void PVector::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Shooter.PVector.Y)
}

// float Z = 3;
inline void PVector::clear_z() {
  _impl_.z_ = 0;
}
inline float PVector::_internal_z() const {
  return _impl_.z_;
}
inline float PVector::z() const {
  // @@protoc_insertion_point(field_get:Shooter.PVector.Z)
  return _internal_z();
}
inline void PVector::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void PVector::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Shooter.PVector.Z)
}

// -------------------------------------------------------------------

// PRotator

// float Roll = 1;
inline void PRotator::clear_roll() {
  _impl_.roll_ = 0;
}
inline float PRotator::_internal_roll() const {
  return _impl_.roll_;
}
inline float PRotator::roll() const {
  // @@protoc_insertion_point(field_get:Shooter.PRotator.Roll)
  return _internal_roll();
}
inline void PRotator::_internal_set_roll(float value) {
  
  _impl_.roll_ = value;
}
inline void PRotator::set_roll(float value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:Shooter.PRotator.Roll)
}

// float Pitch = 2;
inline void PRotator::clear_pitch() {
  _impl_.pitch_ = 0;
}
inline float PRotator::_internal_pitch() const {
  return _impl_.pitch_;
}
inline float PRotator::pitch() const {
  // @@protoc_insertion_point(field_get:Shooter.PRotator.Pitch)
  return _internal_pitch();
}
inline void PRotator::_internal_set_pitch(float value) {
  
  _impl_.pitch_ = value;
}
inline void PRotator::set_pitch(float value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:Shooter.PRotator.Pitch)
}

// float Yaw = 3;
inline void PRotator::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float PRotator::_internal_yaw() const {
  return _impl_.yaw_;
}
inline float PRotator::yaw() const {
  // @@protoc_insertion_point(field_get:Shooter.PRotator.Yaw)
  return _internal_yaw();
}
inline void PRotator::_internal_set_yaw(float value) {
  
  _impl_.yaw_ = value;
}
inline void PRotator::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Shooter.PRotator.Yaw)
}

// -------------------------------------------------------------------

// PEquipment

// optional uint32 EquipmentIndex = 1;
inline bool PEquipment::_internal_has_equipmentindex() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PEquipment::has_equipmentindex() const {
  return _internal_has_equipmentindex();
}
inline void PEquipment::clear_equipmentindex() {
  _impl_.equipmentindex_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline uint32_t PEquipment::_internal_equipmentindex() const {
  return _impl_.equipmentindex_;
}
inline uint32_t PEquipment::equipmentindex() const {
  // @@protoc_insertion_point(field_get:Shooter.PEquipment.EquipmentIndex)
  return _internal_equipmentindex();
}
inline void PEquipment::_internal_set_equipmentindex(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.equipmentindex_ = value;
}
inline void PEquipment::set_equipmentindex(uint32_t value) {
  _internal_set_equipmentindex(value);
  // @@protoc_insertion_point(field_set:Shooter.PEquipment.EquipmentIndex)
}

// -------------------------------------------------------------------

// PWeapon

// optional bool WantToFire = 1;
inline bool PWeapon::_internal_has_wanttofire() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PWeapon::has_wanttofire() const {
  return _internal_has_wanttofire();
}
inline void PWeapon::clear_wanttofire() {
  _impl_.wanttofire_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool PWeapon::_internal_wanttofire() const {
  return _impl_.wanttofire_;
}
inline bool PWeapon::wanttofire() const {
  // @@protoc_insertion_point(field_get:Shooter.PWeapon.WantToFire)
  return _internal_wanttofire();
}
inline void PWeapon::_internal_set_wanttofire(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.wanttofire_ = value;
}
inline void PWeapon::set_wanttofire(bool value) {
  _internal_set_wanttofire(value);
  // @@protoc_insertion_point(field_set:Shooter.PWeapon.WantToFire)
}

// optional uint32 WeaponState = 2;
inline bool PWeapon::_internal_has_weaponstate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PWeapon::has_weaponstate() const {
  return _internal_has_weaponstate();
}
inline void PWeapon::clear_weaponstate() {
  _impl_.weaponstate_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t PWeapon::_internal_weaponstate() const {
  return _impl_.weaponstate_;
}
inline uint32_t PWeapon::weaponstate() const {
  // @@protoc_insertion_point(field_get:Shooter.PWeapon.WeaponState)
  return _internal_weaponstate();
}
inline void PWeapon::_internal_set_weaponstate(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.weaponstate_ = value;
}
inline void PWeapon::set_weaponstate(uint32_t value) {
  _internal_set_weaponstate(value);
  // @@protoc_insertion_point(field_set:Shooter.PWeapon.WeaponState)
}

// optional uint32 AmmoCount = 3;
inline bool PWeapon::_internal_has_ammocount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PWeapon::has_ammocount() const {
  return _internal_has_ammocount();
}
inline void PWeapon::clear_ammocount() {
  _impl_.ammocount_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t PWeapon::_internal_ammocount() const {
  return _impl_.ammocount_;
}
inline uint32_t PWeapon::ammocount() const {
  // @@protoc_insertion_point(field_get:Shooter.PWeapon.AmmoCount)
  return _internal_ammocount();
}
inline void PWeapon::_internal_set_ammocount(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ammocount_ = value;
}
inline void PWeapon::set_ammocount(uint32_t value) {
  _internal_set_ammocount(value);
  // @@protoc_insertion_point(field_set:Shooter.PWeapon.AmmoCount)
}

// -------------------------------------------------------------------

// PClientId

// uint32 Index = 1;
inline void PClientId::clear_index() {
  _impl_.index_ = 0u;
}
inline uint32_t PClientId::_internal_index() const {
  return _impl_.index_;
}
inline uint32_t PClientId::index() const {
  // @@protoc_insertion_point(field_get:Shooter.PClientId.Index)
  return _internal_index();
}
inline void PClientId::_internal_set_index(uint32_t value) {
  
  _impl_.index_ = value;
}
inline void PClientId::set_index(uint32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:Shooter.PClientId.Index)
}

// -------------------------------------------------------------------

// PPawnStatus

// .Shooter.PClientId Id = 1;
inline bool PPawnStatus::_internal_has_id() const {
  return this != internal_default_instance() && _impl_.id_ != nullptr;
}
inline bool PPawnStatus::has_id() const {
  return _internal_has_id();
}
inline void PPawnStatus::clear_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.id_ != nullptr) {
    delete _impl_.id_;
  }
  _impl_.id_ = nullptr;
}
inline const ::Shooter::PClientId& PPawnStatus::_internal_id() const {
  const ::Shooter::PClientId* p = _impl_.id_;
  return p != nullptr ? *p : reinterpret_cast<const ::Shooter::PClientId&>(
      ::Shooter::_PClientId_default_instance_);
}
inline const ::Shooter::PClientId& PPawnStatus::id() const {
  // @@protoc_insertion_point(field_get:Shooter.PPawnStatus.Id)
  return _internal_id();
}
inline void PPawnStatus::unsafe_arena_set_allocated_id(
    ::Shooter::PClientId* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  _impl_.id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Shooter.PPawnStatus.Id)
}
inline ::Shooter::PClientId* PPawnStatus::release_id() {
  
  ::Shooter::PClientId* temp = _impl_.id_;
  _impl_.id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Shooter::PClientId* PPawnStatus::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:Shooter.PPawnStatus.Id)
  
  ::Shooter::PClientId* temp = _impl_.id_;
  _impl_.id_ = nullptr;
  return temp;
}
inline ::Shooter::PClientId* PPawnStatus::_internal_mutable_id() {
  
  if (_impl_.id_ == nullptr) {
    auto* p = CreateMaybeMessage<::Shooter::PClientId>(GetArenaForAllocation());
    _impl_.id_ = p;
  }
  return _impl_.id_;
}
inline ::Shooter::PClientId* PPawnStatus::mutable_id() {
  ::Shooter::PClientId* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Shooter.PPawnStatus.Id)
  return _msg;
}
inline void PPawnStatus::set_allocated_id(::Shooter::PClientId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.id_;
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(id);
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.id_ = id;
  // @@protoc_insertion_point(field_set_allocated:Shooter.PPawnStatus.Id)
}

// optional float Health = 2;
inline bool PPawnStatus::_internal_has_health() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PPawnStatus::has_health() const {
  return _internal_has_health();
}
inline void PPawnStatus::clear_health() {
  _impl_.health_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline float PPawnStatus::_internal_health() const {
  return _impl_.health_;
}
inline float PPawnStatus::health() const {
  // @@protoc_insertion_point(field_get:Shooter.PPawnStatus.Health)
  return _internal_health();
}
inline void PPawnStatus::_internal_set_health(float value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.health_ = value;
}
inline void PPawnStatus::set_health(float value) {
  _internal_set_health(value);
  // @@protoc_insertion_point(field_set:Shooter.PPawnStatus.Health)
}

// optional .Shooter.PEquipment EquipInfo = 3;
inline bool PPawnStatus::_internal_has_equipinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.equipinfo_ != nullptr);
  return value;
}
inline bool PPawnStatus::has_equipinfo() const {
  return _internal_has_equipinfo();
}
inline void PPawnStatus::clear_equipinfo() {
  if (_impl_.equipinfo_ != nullptr) _impl_.equipinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Shooter::PEquipment& PPawnStatus::_internal_equipinfo() const {
  const ::Shooter::PEquipment* p = _impl_.equipinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Shooter::PEquipment&>(
      ::Shooter::_PEquipment_default_instance_);
}
inline const ::Shooter::PEquipment& PPawnStatus::equipinfo() const {
  // @@protoc_insertion_point(field_get:Shooter.PPawnStatus.EquipInfo)
  return _internal_equipinfo();
}
inline void PPawnStatus::unsafe_arena_set_allocated_equipinfo(
    ::Shooter::PEquipment* equipinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.equipinfo_);
  }
  _impl_.equipinfo_ = equipinfo;
  if (equipinfo) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Shooter.PPawnStatus.EquipInfo)
}
inline ::Shooter::PEquipment* PPawnStatus::release_equipinfo() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Shooter::PEquipment* temp = _impl_.equipinfo_;
  _impl_.equipinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Shooter::PEquipment* PPawnStatus::unsafe_arena_release_equipinfo() {
  // @@protoc_insertion_point(field_release:Shooter.PPawnStatus.EquipInfo)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Shooter::PEquipment* temp = _impl_.equipinfo_;
  _impl_.equipinfo_ = nullptr;
  return temp;
}
inline ::Shooter::PEquipment* PPawnStatus::_internal_mutable_equipinfo() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.equipinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Shooter::PEquipment>(GetArenaForAllocation());
    _impl_.equipinfo_ = p;
  }
  return _impl_.equipinfo_;
}
inline ::Shooter::PEquipment* PPawnStatus::mutable_equipinfo() {
  ::Shooter::PEquipment* _msg = _internal_mutable_equipinfo();
  // @@protoc_insertion_point(field_mutable:Shooter.PPawnStatus.EquipInfo)
  return _msg;
}
inline void PPawnStatus::set_allocated_equipinfo(::Shooter::PEquipment* equipinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.equipinfo_;
  }
  if (equipinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(equipinfo);
    if (message_arena != submessage_arena) {
      equipinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, equipinfo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.equipinfo_ = equipinfo;
  // @@protoc_insertion_point(field_set_allocated:Shooter.PPawnStatus.EquipInfo)
}

// optional .Shooter.PWeapon WeaponInfo = 4;
inline bool PPawnStatus::_internal_has_weaponinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.weaponinfo_ != nullptr);
  return value;
}
inline bool PPawnStatus::has_weaponinfo() const {
  return _internal_has_weaponinfo();
}
inline void PPawnStatus::clear_weaponinfo() {
  if (_impl_.weaponinfo_ != nullptr) _impl_.weaponinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Shooter::PWeapon& PPawnStatus::_internal_weaponinfo() const {
  const ::Shooter::PWeapon* p = _impl_.weaponinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::Shooter::PWeapon&>(
      ::Shooter::_PWeapon_default_instance_);
}
inline const ::Shooter::PWeapon& PPawnStatus::weaponinfo() const {
  // @@protoc_insertion_point(field_get:Shooter.PPawnStatus.WeaponInfo)
  return _internal_weaponinfo();
}
inline void PPawnStatus::unsafe_arena_set_allocated_weaponinfo(
    ::Shooter::PWeapon* weaponinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.weaponinfo_);
  }
  _impl_.weaponinfo_ = weaponinfo;
  if (weaponinfo) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Shooter.PPawnStatus.WeaponInfo)
}
inline ::Shooter::PWeapon* PPawnStatus::release_weaponinfo() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Shooter::PWeapon* temp = _impl_.weaponinfo_;
  _impl_.weaponinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Shooter::PWeapon* PPawnStatus::unsafe_arena_release_weaponinfo() {
  // @@protoc_insertion_point(field_release:Shooter.PPawnStatus.WeaponInfo)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Shooter::PWeapon* temp = _impl_.weaponinfo_;
  _impl_.weaponinfo_ = nullptr;
  return temp;
}
inline ::Shooter::PWeapon* PPawnStatus::_internal_mutable_weaponinfo() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.weaponinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::Shooter::PWeapon>(GetArenaForAllocation());
    _impl_.weaponinfo_ = p;
  }
  return _impl_.weaponinfo_;
}
inline ::Shooter::PWeapon* PPawnStatus::mutable_weaponinfo() {
  ::Shooter::PWeapon* _msg = _internal_mutable_weaponinfo();
  // @@protoc_insertion_point(field_mutable:Shooter.PPawnStatus.WeaponInfo)
  return _msg;
}
inline void PPawnStatus::set_allocated_weaponinfo(::Shooter::PWeapon* weaponinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.weaponinfo_;
  }
  if (weaponinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(weaponinfo);
    if (message_arena != submessage_arena) {
      weaponinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, weaponinfo, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.weaponinfo_ = weaponinfo;
  // @@protoc_insertion_point(field_set_allocated:Shooter.PPawnStatus.WeaponInfo)
}

// -------------------------------------------------------------------

// PMovement

// .Shooter.PClientId Id = 1;
inline bool PMovement::_internal_has_id() const {
  return this != internal_default_instance() && _impl_.id_ != nullptr;
}
inline bool PMovement::has_id() const {
  return _internal_has_id();
}
inline void PMovement::clear_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.id_ != nullptr) {
    delete _impl_.id_;
  }
  _impl_.id_ = nullptr;
}
inline const ::Shooter::PClientId& PMovement::_internal_id() const {
  const ::Shooter::PClientId* p = _impl_.id_;
  return p != nullptr ? *p : reinterpret_cast<const ::Shooter::PClientId&>(
      ::Shooter::_PClientId_default_instance_);
}
inline const ::Shooter::PClientId& PMovement::id() const {
  // @@protoc_insertion_point(field_get:Shooter.PMovement.Id)
  return _internal_id();
}
inline void PMovement::unsafe_arena_set_allocated_id(
    ::Shooter::PClientId* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  _impl_.id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Shooter.PMovement.Id)
}
inline ::Shooter::PClientId* PMovement::release_id() {
  
  ::Shooter::PClientId* temp = _impl_.id_;
  _impl_.id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Shooter::PClientId* PMovement::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:Shooter.PMovement.Id)
  
  ::Shooter::PClientId* temp = _impl_.id_;
  _impl_.id_ = nullptr;
  return temp;
}
inline ::Shooter::PClientId* PMovement::_internal_mutable_id() {
  
  if (_impl_.id_ == nullptr) {
    auto* p = CreateMaybeMessage<::Shooter::PClientId>(GetArenaForAllocation());
    _impl_.id_ = p;
  }
  return _impl_.id_;
}
inline ::Shooter::PClientId* PMovement::mutable_id() {
  ::Shooter::PClientId* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Shooter.PMovement.Id)
  return _msg;
}
inline void PMovement::set_allocated_id(::Shooter::PClientId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.id_;
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(id);
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.id_ = id;
  // @@protoc_insertion_point(field_set_allocated:Shooter.PMovement.Id)
}

// optional .Shooter.PVector Loc = 2;
inline bool PMovement::_internal_has_loc() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.loc_ != nullptr);
  return value;
}
inline bool PMovement::has_loc() const {
  return _internal_has_loc();
}
inline void PMovement::clear_loc() {
  if (_impl_.loc_ != nullptr) _impl_.loc_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::Shooter::PVector& PMovement::_internal_loc() const {
  const ::Shooter::PVector* p = _impl_.loc_;
  return p != nullptr ? *p : reinterpret_cast<const ::Shooter::PVector&>(
      ::Shooter::_PVector_default_instance_);
}
inline const ::Shooter::PVector& PMovement::loc() const {
  // @@protoc_insertion_point(field_get:Shooter.PMovement.Loc)
  return _internal_loc();
}
inline void PMovement::unsafe_arena_set_allocated_loc(
    ::Shooter::PVector* loc) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.loc_);
  }
  _impl_.loc_ = loc;
  if (loc) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Shooter.PMovement.Loc)
}
inline ::Shooter::PVector* PMovement::release_loc() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Shooter::PVector* temp = _impl_.loc_;
  _impl_.loc_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Shooter::PVector* PMovement::unsafe_arena_release_loc() {
  // @@protoc_insertion_point(field_release:Shooter.PMovement.Loc)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::Shooter::PVector* temp = _impl_.loc_;
  _impl_.loc_ = nullptr;
  return temp;
}
inline ::Shooter::PVector* PMovement::_internal_mutable_loc() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.loc_ == nullptr) {
    auto* p = CreateMaybeMessage<::Shooter::PVector>(GetArenaForAllocation());
    _impl_.loc_ = p;
  }
  return _impl_.loc_;
}
inline ::Shooter::PVector* PMovement::mutable_loc() {
  ::Shooter::PVector* _msg = _internal_mutable_loc();
  // @@protoc_insertion_point(field_mutable:Shooter.PMovement.Loc)
  return _msg;
}
inline void PMovement::set_allocated_loc(::Shooter::PVector* loc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.loc_;
  }
  if (loc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(loc);
    if (message_arena != submessage_arena) {
      loc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loc, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.loc_ = loc;
  // @@protoc_insertion_point(field_set_allocated:Shooter.PMovement.Loc)
}

// optional .Shooter.PRotator Rot = 3;
inline bool PMovement::_internal_has_rot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rot_ != nullptr);
  return value;
}
inline bool PMovement::has_rot() const {
  return _internal_has_rot();
}
inline void PMovement::clear_rot() {
  if (_impl_.rot_ != nullptr) _impl_.rot_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::Shooter::PRotator& PMovement::_internal_rot() const {
  const ::Shooter::PRotator* p = _impl_.rot_;
  return p != nullptr ? *p : reinterpret_cast<const ::Shooter::PRotator&>(
      ::Shooter::_PRotator_default_instance_);
}
inline const ::Shooter::PRotator& PMovement::rot() const {
  // @@protoc_insertion_point(field_get:Shooter.PMovement.Rot)
  return _internal_rot();
}
inline void PMovement::unsafe_arena_set_allocated_rot(
    ::Shooter::PRotator* rot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rot_);
  }
  _impl_.rot_ = rot;
  if (rot) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Shooter.PMovement.Rot)
}
inline ::Shooter::PRotator* PMovement::release_rot() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Shooter::PRotator* temp = _impl_.rot_;
  _impl_.rot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Shooter::PRotator* PMovement::unsafe_arena_release_rot() {
  // @@protoc_insertion_point(field_release:Shooter.PMovement.Rot)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::Shooter::PRotator* temp = _impl_.rot_;
  _impl_.rot_ = nullptr;
  return temp;
}
inline ::Shooter::PRotator* PMovement::_internal_mutable_rot() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.rot_ == nullptr) {
    auto* p = CreateMaybeMessage<::Shooter::PRotator>(GetArenaForAllocation());
    _impl_.rot_ = p;
  }
  return _impl_.rot_;
}
inline ::Shooter::PRotator* PMovement::mutable_rot() {
  ::Shooter::PRotator* _msg = _internal_mutable_rot();
  // @@protoc_insertion_point(field_mutable:Shooter.PMovement.Rot)
  return _msg;
}
inline void PMovement::set_allocated_rot(::Shooter::PRotator* rot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rot_;
  }
  if (rot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rot);
    if (message_arena != submessage_arena) {
      rot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rot, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.rot_ = rot;
  // @@protoc_insertion_point(field_set_allocated:Shooter.PMovement.Rot)
}

// optional .Shooter.PVector Vel = 4;
inline bool PMovement::_internal_has_vel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vel_ != nullptr);
  return value;
}
inline bool PMovement::has_vel() const {
  return _internal_has_vel();
}
inline void PMovement::clear_vel() {
  if (_impl_.vel_ != nullptr) _impl_.vel_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::Shooter::PVector& PMovement::_internal_vel() const {
  const ::Shooter::PVector* p = _impl_.vel_;
  return p != nullptr ? *p : reinterpret_cast<const ::Shooter::PVector&>(
      ::Shooter::_PVector_default_instance_);
}
inline const ::Shooter::PVector& PMovement::vel() const {
  // @@protoc_insertion_point(field_get:Shooter.PMovement.Vel)
  return _internal_vel();
}
inline void PMovement::unsafe_arena_set_allocated_vel(
    ::Shooter::PVector* vel) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vel_);
  }
  _impl_.vel_ = vel;
  if (vel) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Shooter.PMovement.Vel)
}
inline ::Shooter::PVector* PMovement::release_vel() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Shooter::PVector* temp = _impl_.vel_;
  _impl_.vel_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Shooter::PVector* PMovement::unsafe_arena_release_vel() {
  // @@protoc_insertion_point(field_release:Shooter.PMovement.Vel)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::Shooter::PVector* temp = _impl_.vel_;
  _impl_.vel_ = nullptr;
  return temp;
}
inline ::Shooter::PVector* PMovement::_internal_mutable_vel() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.vel_ == nullptr) {
    auto* p = CreateMaybeMessage<::Shooter::PVector>(GetArenaForAllocation());
    _impl_.vel_ = p;
  }
  return _impl_.vel_;
}
inline ::Shooter::PVector* PMovement::mutable_vel() {
  ::Shooter::PVector* _msg = _internal_mutable_vel();
  // @@protoc_insertion_point(field_mutable:Shooter.PMovement.Vel)
  return _msg;
}
inline void PMovement::set_allocated_vel(::Shooter::PVector* vel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.vel_;
  }
  if (vel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(vel);
    if (message_arena != submessage_arena) {
      vel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vel, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.vel_ = vel;
  // @@protoc_insertion_point(field_set_allocated:Shooter.PMovement.Vel)
}

// -------------------------------------------------------------------

// PAnimState

// .Shooter.PClientId Id = 1;
inline bool PAnimState::_internal_has_id() const {
  return this != internal_default_instance() && _impl_.id_ != nullptr;
}
inline bool PAnimState::has_id() const {
  return _internal_has_id();
}
inline void PAnimState::clear_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.id_ != nullptr) {
    delete _impl_.id_;
  }
  _impl_.id_ = nullptr;
}
inline const ::Shooter::PClientId& PAnimState::_internal_id() const {
  const ::Shooter::PClientId* p = _impl_.id_;
  return p != nullptr ? *p : reinterpret_cast<const ::Shooter::PClientId&>(
      ::Shooter::_PClientId_default_instance_);
}
inline const ::Shooter::PClientId& PAnimState::id() const {
  // @@protoc_insertion_point(field_get:Shooter.PAnimState.Id)
  return _internal_id();
}
inline void PAnimState::unsafe_arena_set_allocated_id(
    ::Shooter::PClientId* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.id_);
  }
  _impl_.id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Shooter.PAnimState.Id)
}
inline ::Shooter::PClientId* PAnimState::release_id() {
  
  ::Shooter::PClientId* temp = _impl_.id_;
  _impl_.id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Shooter::PClientId* PAnimState::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:Shooter.PAnimState.Id)
  
  ::Shooter::PClientId* temp = _impl_.id_;
  _impl_.id_ = nullptr;
  return temp;
}
inline ::Shooter::PClientId* PAnimState::_internal_mutable_id() {
  
  if (_impl_.id_ == nullptr) {
    auto* p = CreateMaybeMessage<::Shooter::PClientId>(GetArenaForAllocation());
    _impl_.id_ = p;
  }
  return _impl_.id_;
}
inline ::Shooter::PClientId* PAnimState::mutable_id() {
  ::Shooter::PClientId* _msg = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:Shooter.PAnimState.Id)
  return _msg;
}
inline void PAnimState::set_allocated_id(::Shooter::PClientId* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.id_;
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(id);
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.id_ = id;
  // @@protoc_insertion_point(field_set_allocated:Shooter.PAnimState.Id)
}

// optional float AimYaw = 2;
inline bool PAnimState::_internal_has_aimyaw() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PAnimState::has_aimyaw() const {
  return _internal_has_aimyaw();
}
inline void PAnimState::clear_aimyaw() {
  _impl_.aimyaw_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline float PAnimState::_internal_aimyaw() const {
  return _impl_.aimyaw_;
}
inline float PAnimState::aimyaw() const {
  // @@protoc_insertion_point(field_get:Shooter.PAnimState.AimYaw)
  return _internal_aimyaw();
}
inline void PAnimState::_internal_set_aimyaw(float value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.aimyaw_ = value;
}
inline void PAnimState::set_aimyaw(float value) {
  _internal_set_aimyaw(value);
  // @@protoc_insertion_point(field_set:Shooter.PAnimState.AimYaw)
}

// optional float AimPitch = 3;
inline bool PAnimState::_internal_has_aimpitch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PAnimState::has_aimpitch() const {
  return _internal_has_aimpitch();
}
inline void PAnimState::clear_aimpitch() {
  _impl_.aimpitch_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline float PAnimState::_internal_aimpitch() const {
  return _impl_.aimpitch_;
}
inline float PAnimState::aimpitch() const {
  // @@protoc_insertion_point(field_get:Shooter.PAnimState.AimPitch)
  return _internal_aimpitch();
}
inline void PAnimState::_internal_set_aimpitch(float value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.aimpitch_ = value;
}
inline void PAnimState::set_aimpitch(float value) {
  _internal_set_aimpitch(value);
  // @@protoc_insertion_point(field_set:Shooter.PAnimState.AimPitch)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Shooter

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ShooterProtocol_2eproto
