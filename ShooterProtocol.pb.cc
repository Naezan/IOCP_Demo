// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ShooterProtocol.proto

#include "ShooterProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Shooter {
PROTOBUF_CONSTEXPR PVector::PVector(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PVectorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PVectorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PVectorDefaultTypeInternal() {}
  union {
    PVector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PVectorDefaultTypeInternal _PVector_default_instance_;
PROTOBUF_CONSTEXPR PRotator::PRotator(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.roll_)*/0
  , /*decltype(_impl_.pitch_)*/0
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PRotatorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PRotatorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PRotatorDefaultTypeInternal() {}
  union {
    PRotator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PRotatorDefaultTypeInternal _PRotator_default_instance_;
PROTOBUF_CONSTEXPR PEquipment::PEquipment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.equipmentindex_)*/0u} {}
struct PEquipmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PEquipmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PEquipmentDefaultTypeInternal() {}
  union {
    PEquipment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PEquipmentDefaultTypeInternal _PEquipment_default_instance_;
PROTOBUF_CONSTEXPR PWeapon::PWeapon(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.wanttofire_)*/false
  , /*decltype(_impl_.weaponstate_)*/0u
  , /*decltype(_impl_.ammocount_)*/0u} {}
struct PWeaponDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PWeaponDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PWeaponDefaultTypeInternal() {}
  union {
    PWeapon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PWeaponDefaultTypeInternal _PWeapon_default_instance_;
PROTOBUF_CONSTEXPR PClientId::PClientId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PClientIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PClientIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PClientIdDefaultTypeInternal() {}
  union {
    PClientId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PClientIdDefaultTypeInternal _PClientId_default_instance_;
PROTOBUF_CONSTEXPR PPawnStatus::PPawnStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_.equipinfo_)*/nullptr
  , /*decltype(_impl_.weaponinfo_)*/nullptr
  , /*decltype(_impl_.health_)*/0} {}
struct PPawnStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PPawnStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PPawnStatusDefaultTypeInternal() {}
  union {
    PPawnStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PPawnStatusDefaultTypeInternal _PPawnStatus_default_instance_;
PROTOBUF_CONSTEXPR PMovement::PMovement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_.loc_)*/nullptr
  , /*decltype(_impl_.rot_)*/nullptr
  , /*decltype(_impl_.vel_)*/nullptr} {}
struct PMovementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PMovementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PMovementDefaultTypeInternal() {}
  union {
    PMovement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PMovementDefaultTypeInternal _PMovement_default_instance_;
PROTOBUF_CONSTEXPR PAnimState::PAnimState(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.id_)*/nullptr
  , /*decltype(_impl_.aimyaw_)*/0
  , /*decltype(_impl_.aimpitch_)*/0} {}
struct PAnimStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PAnimStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PAnimStateDefaultTypeInternal() {}
  union {
    PAnimState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PAnimStateDefaultTypeInternal _PAnimState_default_instance_;
}  // namespace Shooter
static ::_pb::Metadata file_level_metadata_ShooterProtocol_2eproto[8];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_ShooterProtocol_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_ShooterProtocol_2eproto = nullptr;

const uint32_t TableStruct_ShooterProtocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Shooter::PVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Shooter::PVector, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::Shooter::PVector, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::Shooter::PVector, _impl_.z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Shooter::PRotator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Shooter::PRotator, _impl_.roll_),
  PROTOBUF_FIELD_OFFSET(::Shooter::PRotator, _impl_.pitch_),
  PROTOBUF_FIELD_OFFSET(::Shooter::PRotator, _impl_.yaw_),
  PROTOBUF_FIELD_OFFSET(::Shooter::PEquipment, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Shooter::PEquipment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Shooter::PEquipment, _impl_.equipmentindex_),
  0,
  PROTOBUF_FIELD_OFFSET(::Shooter::PWeapon, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Shooter::PWeapon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Shooter::PWeapon, _impl_.wanttofire_),
  PROTOBUF_FIELD_OFFSET(::Shooter::PWeapon, _impl_.weaponstate_),
  PROTOBUF_FIELD_OFFSET(::Shooter::PWeapon, _impl_.ammocount_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Shooter::PClientId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Shooter::PClientId, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::Shooter::PPawnStatus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Shooter::PPawnStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Shooter::PPawnStatus, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Shooter::PPawnStatus, _impl_.health_),
  PROTOBUF_FIELD_OFFSET(::Shooter::PPawnStatus, _impl_.equipinfo_),
  PROTOBUF_FIELD_OFFSET(::Shooter::PPawnStatus, _impl_.weaponinfo_),
  ~0u,
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::Shooter::PMovement, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Shooter::PMovement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Shooter::PMovement, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Shooter::PMovement, _impl_.loc_),
  PROTOBUF_FIELD_OFFSET(::Shooter::PMovement, _impl_.rot_),
  PROTOBUF_FIELD_OFFSET(::Shooter::PMovement, _impl_.vel_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::Shooter::PAnimState, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::Shooter::PAnimState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Shooter::PAnimState, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::Shooter::PAnimState, _impl_.aimyaw_),
  PROTOBUF_FIELD_OFFSET(::Shooter::PAnimState, _impl_.aimpitch_),
  ~0u,
  0,
  1,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Shooter::PVector)},
  { 9, -1, -1, sizeof(::Shooter::PRotator)},
  { 18, 25, -1, sizeof(::Shooter::PEquipment)},
  { 26, 35, -1, sizeof(::Shooter::PWeapon)},
  { 38, -1, -1, sizeof(::Shooter::PClientId)},
  { 45, 55, -1, sizeof(::Shooter::PPawnStatus)},
  { 59, 69, -1, sizeof(::Shooter::PMovement)},
  { 73, 82, -1, sizeof(::Shooter::PAnimState)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Shooter::_PVector_default_instance_._instance,
  &::Shooter::_PRotator_default_instance_._instance,
  &::Shooter::_PEquipment_default_instance_._instance,
  &::Shooter::_PWeapon_default_instance_._instance,
  &::Shooter::_PClientId_default_instance_._instance,
  &::Shooter::_PPawnStatus_default_instance_._instance,
  &::Shooter::_PMovement_default_instance_._instance,
  &::Shooter::_PAnimState_default_instance_._instance,
};

const char descriptor_table_protodef_ShooterProtocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025ShooterProtocol.proto\022\007Shooter\"*\n\007PVec"
  "tor\022\t\n\001X\030\001 \001(\002\022\t\n\001Y\030\002 \001(\002\022\t\n\001Z\030\003 \001(\002\"4\n\010"
  "PRotator\022\014\n\004Roll\030\001 \001(\002\022\r\n\005Pitch\030\002 \001(\002\022\013\n"
  "\003Yaw\030\003 \001(\002\"<\n\nPEquipment\022\033\n\016EquipmentInd"
  "ex\030\001 \001(\rH\000\210\001\001B\021\n\017_EquipmentIndex\"\201\001\n\007PWe"
  "apon\022\027\n\nWantToFire\030\001 \001(\010H\000\210\001\001\022\030\n\013WeaponS"
  "tate\030\002 \001(\rH\001\210\001\001\022\026\n\tAmmoCount\030\003 \001(\rH\002\210\001\001B"
  "\r\n\013_WantToFireB\016\n\014_WeaponStateB\014\n\n_AmmoC"
  "ount\"\032\n\tPClientId\022\r\n\005Index\030\001 \001(\r\"\302\001\n\013PPa"
  "wnStatus\022\036\n\002Id\030\001 \001(\0132\022.Shooter.PClientId"
  "\022\023\n\006Health\030\002 \001(\002H\000\210\001\001\022+\n\tEquipInfo\030\003 \001(\013"
  "2\023.Shooter.PEquipmentH\001\210\001\001\022)\n\nWeaponInfo"
  "\030\004 \001(\0132\020.Shooter.PWeaponH\002\210\001\001B\t\n\007_Health"
  "B\014\n\n_EquipInfoB\r\n\013_WeaponInfo\"\260\001\n\tPMovem"
  "ent\022\036\n\002Id\030\001 \001(\0132\022.Shooter.PClientId\022\"\n\003L"
  "oc\030\002 \001(\0132\020.Shooter.PVectorH\000\210\001\001\022#\n\003Rot\030\003"
  " \001(\0132\021.Shooter.PRotatorH\001\210\001\001\022\"\n\003Vel\030\004 \001("
  "\0132\020.Shooter.PVectorH\002\210\001\001B\006\n\004_LocB\006\n\004_Rot"
  "B\006\n\004_Vel\"p\n\nPAnimState\022\036\n\002Id\030\001 \001(\0132\022.Sho"
  "oter.PClientId\022\023\n\006AimYaw\030\002 \001(\002H\000\210\001\001\022\025\n\010A"
  "imPitch\030\003 \001(\002H\001\210\001\001B\t\n\007_AimYawB\013\n\t_AimPit"
  "chb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_ShooterProtocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_ShooterProtocol_2eproto = {
    false, false, 850, descriptor_table_protodef_ShooterProtocol_2eproto,
    "ShooterProtocol.proto",
    &descriptor_table_ShooterProtocol_2eproto_once, nullptr, 0, 8,
    schemas, file_default_instances, TableStruct_ShooterProtocol_2eproto::offsets,
    file_level_metadata_ShooterProtocol_2eproto, file_level_enum_descriptors_ShooterProtocol_2eproto,
    file_level_service_descriptors_ShooterProtocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_ShooterProtocol_2eproto_getter() {
  return &descriptor_table_ShooterProtocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_ShooterProtocol_2eproto(&descriptor_table_ShooterProtocol_2eproto);
namespace Shooter {

// ===================================================================

class PVector::_Internal {
 public:
};

PVector::PVector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Shooter.PVector)
}
PVector::PVector(const PVector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PVector* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.z_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  // @@protoc_insertion_point(copy_constructor:Shooter.PVector)
}

inline void PVector::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PVector::~PVector() {
  // @@protoc_insertion_point(destructor:Shooter.PVector)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PVector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PVector::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PVector::Clear() {
// @@protoc_insertion_point(message_clear_start:Shooter.PVector)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.z_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PVector::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float X = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PVector::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Shooter.PVector)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float X = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float Y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float Z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Shooter.PVector)
  return target;
}

size_t PVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Shooter.PVector)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float X = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float Y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float Z = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = this->_internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PVector::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PVector::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PVector::GetClassData() const { return &_class_data_; }


void PVector::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PVector*>(&to_msg);
  auto& from = static_cast<const PVector&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Shooter.PVector)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_z = from._internal_z();
  uint32_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _this->_internal_set_z(from._internal_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PVector::CopyFrom(const PVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Shooter.PVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVector::IsInitialized() const {
  return true;
}

void PVector::InternalSwap(PVector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PVector, _impl_.z_)
      + sizeof(PVector::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(PVector, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PVector::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ShooterProtocol_2eproto_getter, &descriptor_table_ShooterProtocol_2eproto_once,
      file_level_metadata_ShooterProtocol_2eproto[0]);
}

// ===================================================================

class PRotator::_Internal {
 public:
};

PRotator::PRotator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Shooter.PRotator)
}
PRotator::PRotator(const PRotator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PRotator* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.roll_){}
    , decltype(_impl_.pitch_){}
    , decltype(_impl_.yaw_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.roll_, &from._impl_.roll_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.yaw_) -
    reinterpret_cast<char*>(&_impl_.roll_)) + sizeof(_impl_.yaw_));
  // @@protoc_insertion_point(copy_constructor:Shooter.PRotator)
}

inline void PRotator::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.roll_){0}
    , decltype(_impl_.pitch_){0}
    , decltype(_impl_.yaw_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PRotator::~PRotator() {
  // @@protoc_insertion_point(destructor:Shooter.PRotator)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PRotator::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PRotator::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PRotator::Clear() {
// @@protoc_insertion_point(message_clear_start:Shooter.PRotator)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.roll_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.yaw_) -
      reinterpret_cast<char*>(&_impl_.roll_)) + sizeof(_impl_.yaw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PRotator::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float Roll = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Pitch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float Yaw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PRotator::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Shooter.PRotator)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float Roll = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_roll(), target);
  }

  // float Pitch = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_pitch(), target);
  }

  // float Yaw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_yaw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Shooter.PRotator)
  return target;
}

size_t PRotator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Shooter.PRotator)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float Roll = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    total_size += 1 + 4;
  }

  // float Pitch = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 1 + 4;
  }

  // float Yaw = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PRotator::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PRotator::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PRotator::GetClassData() const { return &_class_data_; }


void PRotator::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PRotator*>(&to_msg);
  auto& from = static_cast<const PRotator&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Shooter.PRotator)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = from._internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    _this->_internal_set_roll(from._internal_roll());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = from._internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _this->_internal_set_pitch(from._internal_pitch());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PRotator::CopyFrom(const PRotator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Shooter.PRotator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRotator::IsInitialized() const {
  return true;
}

void PRotator::InternalSwap(PRotator* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PRotator, _impl_.yaw_)
      + sizeof(PRotator::_impl_.yaw_)
      - PROTOBUF_FIELD_OFFSET(PRotator, _impl_.roll_)>(
          reinterpret_cast<char*>(&_impl_.roll_),
          reinterpret_cast<char*>(&other->_impl_.roll_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PRotator::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ShooterProtocol_2eproto_getter, &descriptor_table_ShooterProtocol_2eproto_once,
      file_level_metadata_ShooterProtocol_2eproto[1]);
}

// ===================================================================

class PEquipment::_Internal {
 public:
  using HasBits = decltype(std::declval<PEquipment>()._impl_._has_bits_);
  static void set_has_equipmentindex(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

PEquipment::PEquipment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Shooter.PEquipment)
}
PEquipment::PEquipment(const PEquipment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PEquipment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.equipmentindex_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.equipmentindex_ = from._impl_.equipmentindex_;
  // @@protoc_insertion_point(copy_constructor:Shooter.PEquipment)
}

inline void PEquipment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.equipmentindex_){0u}
  };
}

PEquipment::~PEquipment() {
  // @@protoc_insertion_point(destructor:Shooter.PEquipment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PEquipment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PEquipment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PEquipment::Clear() {
// @@protoc_insertion_point(message_clear_start:Shooter.PEquipment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.equipmentindex_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PEquipment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 EquipmentIndex = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_equipmentindex(&has_bits);
          _impl_.equipmentindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PEquipment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Shooter.PEquipment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional uint32 EquipmentIndex = 1;
  if (_internal_has_equipmentindex()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_equipmentindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Shooter.PEquipment)
  return target;
}

size_t PEquipment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Shooter.PEquipment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 EquipmentIndex = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_equipmentindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PEquipment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PEquipment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PEquipment::GetClassData() const { return &_class_data_; }


void PEquipment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PEquipment*>(&to_msg);
  auto& from = static_cast<const PEquipment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Shooter.PEquipment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_equipmentindex()) {
    _this->_internal_set_equipmentindex(from._internal_equipmentindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PEquipment::CopyFrom(const PEquipment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Shooter.PEquipment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PEquipment::IsInitialized() const {
  return true;
}

void PEquipment::InternalSwap(PEquipment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.equipmentindex_, other->_impl_.equipmentindex_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PEquipment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ShooterProtocol_2eproto_getter, &descriptor_table_ShooterProtocol_2eproto_once,
      file_level_metadata_ShooterProtocol_2eproto[2]);
}

// ===================================================================

class PWeapon::_Internal {
 public:
  using HasBits = decltype(std::declval<PWeapon>()._impl_._has_bits_);
  static void set_has_wanttofire(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_weaponstate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ammocount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PWeapon::PWeapon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Shooter.PWeapon)
}
PWeapon::PWeapon(const PWeapon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PWeapon* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.wanttofire_){}
    , decltype(_impl_.weaponstate_){}
    , decltype(_impl_.ammocount_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.wanttofire_, &from._impl_.wanttofire_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ammocount_) -
    reinterpret_cast<char*>(&_impl_.wanttofire_)) + sizeof(_impl_.ammocount_));
  // @@protoc_insertion_point(copy_constructor:Shooter.PWeapon)
}

inline void PWeapon::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.wanttofire_){false}
    , decltype(_impl_.weaponstate_){0u}
    , decltype(_impl_.ammocount_){0u}
  };
}

PWeapon::~PWeapon() {
  // @@protoc_insertion_point(destructor:Shooter.PWeapon)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PWeapon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PWeapon::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PWeapon::Clear() {
// @@protoc_insertion_point(message_clear_start:Shooter.PWeapon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.wanttofire_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.ammocount_) -
        reinterpret_cast<char*>(&_impl_.wanttofire_)) + sizeof(_impl_.ammocount_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PWeapon::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool WantToFire = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_wanttofire(&has_bits);
          _impl_.wanttofire_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 WeaponState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_weaponstate(&has_bits);
          _impl_.weaponstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 AmmoCount = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_ammocount(&has_bits);
          _impl_.ammocount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PWeapon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Shooter.PWeapon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // optional bool WantToFire = 1;
  if (_internal_has_wanttofire()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_wanttofire(), target);
  }

  // optional uint32 WeaponState = 2;
  if (_internal_has_weaponstate()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_weaponstate(), target);
  }

  // optional uint32 AmmoCount = 3;
  if (_internal_has_ammocount()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_ammocount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Shooter.PWeapon)
  return target;
}

size_t PWeapon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Shooter.PWeapon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool WantToFire = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 WeaponState = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_weaponstate());
    }

    // optional uint32 AmmoCount = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_ammocount());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PWeapon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PWeapon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PWeapon::GetClassData() const { return &_class_data_; }


void PWeapon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PWeapon*>(&to_msg);
  auto& from = static_cast<const PWeapon&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Shooter.PWeapon)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.wanttofire_ = from._impl_.wanttofire_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.weaponstate_ = from._impl_.weaponstate_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ammocount_ = from._impl_.ammocount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PWeapon::CopyFrom(const PWeapon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Shooter.PWeapon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PWeapon::IsInitialized() const {
  return true;
}

void PWeapon::InternalSwap(PWeapon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PWeapon, _impl_.ammocount_)
      + sizeof(PWeapon::_impl_.ammocount_)
      - PROTOBUF_FIELD_OFFSET(PWeapon, _impl_.wanttofire_)>(
          reinterpret_cast<char*>(&_impl_.wanttofire_),
          reinterpret_cast<char*>(&other->_impl_.wanttofire_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PWeapon::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ShooterProtocol_2eproto_getter, &descriptor_table_ShooterProtocol_2eproto_once,
      file_level_metadata_ShooterProtocol_2eproto[3]);
}

// ===================================================================

class PClientId::_Internal {
 public:
};

PClientId::PClientId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Shooter.PClientId)
}
PClientId::PClientId(const PClientId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PClientId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.index_ = from._impl_.index_;
  // @@protoc_insertion_point(copy_constructor:Shooter.PClientId)
}

inline void PClientId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PClientId::~PClientId() {
  // @@protoc_insertion_point(destructor:Shooter.PClientId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PClientId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PClientId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PClientId::Clear() {
// @@protoc_insertion_point(message_clear_start:Shooter.PClientId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PClientId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PClientId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Shooter.PClientId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Index = 1;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Shooter.PClientId)
  return target;
}

size_t PClientId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Shooter.PClientId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 Index = 1;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PClientId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PClientId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PClientId::GetClassData() const { return &_class_data_; }


void PClientId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PClientId*>(&to_msg);
  auto& from = static_cast<const PClientId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Shooter.PClientId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PClientId::CopyFrom(const PClientId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Shooter.PClientId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PClientId::IsInitialized() const {
  return true;
}

void PClientId::InternalSwap(PClientId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.index_, other->_impl_.index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PClientId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ShooterProtocol_2eproto_getter, &descriptor_table_ShooterProtocol_2eproto_once,
      file_level_metadata_ShooterProtocol_2eproto[4]);
}

// ===================================================================

class PPawnStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<PPawnStatus>()._impl_._has_bits_);
  static const ::Shooter::PClientId& id(const PPawnStatus* msg);
  static void set_has_health(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::Shooter::PEquipment& equipinfo(const PPawnStatus* msg);
  static void set_has_equipinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Shooter::PWeapon& weaponinfo(const PPawnStatus* msg);
  static void set_has_weaponinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Shooter::PClientId&
PPawnStatus::_Internal::id(const PPawnStatus* msg) {
  return *msg->_impl_.id_;
}
const ::Shooter::PEquipment&
PPawnStatus::_Internal::equipinfo(const PPawnStatus* msg) {
  return *msg->_impl_.equipinfo_;
}
const ::Shooter::PWeapon&
PPawnStatus::_Internal::weaponinfo(const PPawnStatus* msg) {
  return *msg->_impl_.weaponinfo_;
}
PPawnStatus::PPawnStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Shooter.PPawnStatus)
}
PPawnStatus::PPawnStatus(const PPawnStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PPawnStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.equipinfo_){nullptr}
    , decltype(_impl_.weaponinfo_){nullptr}
    , decltype(_impl_.health_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    _this->_impl_.id_ = new ::Shooter::PClientId(*from._impl_.id_);
  }
  if (from._internal_has_equipinfo()) {
    _this->_impl_.equipinfo_ = new ::Shooter::PEquipment(*from._impl_.equipinfo_);
  }
  if (from._internal_has_weaponinfo()) {
    _this->_impl_.weaponinfo_ = new ::Shooter::PWeapon(*from._impl_.weaponinfo_);
  }
  _this->_impl_.health_ = from._impl_.health_;
  // @@protoc_insertion_point(copy_constructor:Shooter.PPawnStatus)
}

inline void PPawnStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.equipinfo_){nullptr}
    , decltype(_impl_.weaponinfo_){nullptr}
    , decltype(_impl_.health_){0}
  };
}

PPawnStatus::~PPawnStatus() {
  // @@protoc_insertion_point(destructor:Shooter.PPawnStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PPawnStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.id_;
  if (this != internal_default_instance()) delete _impl_.equipinfo_;
  if (this != internal_default_instance()) delete _impl_.weaponinfo_;
}

void PPawnStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PPawnStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:Shooter.PPawnStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.id_ != nullptr) {
    delete _impl_.id_;
  }
  _impl_.id_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.equipinfo_ != nullptr);
      _impl_.equipinfo_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.weaponinfo_ != nullptr);
      _impl_.weaponinfo_->Clear();
    }
  }
  _impl_.health_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PPawnStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Shooter.PClientId Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float Health = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_health(&has_bits);
          _impl_.health_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional .Shooter.PEquipment EquipInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_equipinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Shooter.PWeapon WeaponInfo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_weaponinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PPawnStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Shooter.PPawnStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Shooter.PClientId Id = 1;
  if (this->_internal_has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // optional float Health = 2;
  if (_internal_has_health()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_health(), target);
  }

  // optional .Shooter.PEquipment EquipInfo = 3;
  if (_internal_has_equipinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::equipinfo(this),
        _Internal::equipinfo(this).GetCachedSize(), target, stream);
  }

  // optional .Shooter.PWeapon WeaponInfo = 4;
  if (_internal_has_weaponinfo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::weaponinfo(this),
        _Internal::weaponinfo(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Shooter.PPawnStatus)
  return target;
}

size_t PPawnStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Shooter.PPawnStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Shooter.PClientId Id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.id_);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .Shooter.PEquipment EquipInfo = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.equipinfo_);
    }

    // optional .Shooter.PWeapon WeaponInfo = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.weaponinfo_);
    }

    // optional float Health = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PPawnStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PPawnStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PPawnStatus::GetClassData() const { return &_class_data_; }


void PPawnStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PPawnStatus*>(&to_msg);
  auto& from = static_cast<const PPawnStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Shooter.PPawnStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _this->_internal_mutable_id()->::Shooter::PClientId::MergeFrom(
        from._internal_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_equipinfo()->::Shooter::PEquipment::MergeFrom(
          from._internal_equipinfo());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_weaponinfo()->::Shooter::PWeapon::MergeFrom(
          from._internal_weaponinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.health_ = from._impl_.health_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PPawnStatus::CopyFrom(const PPawnStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Shooter.PPawnStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PPawnStatus::IsInitialized() const {
  return true;
}

void PPawnStatus::InternalSwap(PPawnStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PPawnStatus, _impl_.health_)
      + sizeof(PPawnStatus::_impl_.health_)
      - PROTOBUF_FIELD_OFFSET(PPawnStatus, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PPawnStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ShooterProtocol_2eproto_getter, &descriptor_table_ShooterProtocol_2eproto_once,
      file_level_metadata_ShooterProtocol_2eproto[5]);
}

// ===================================================================

class PMovement::_Internal {
 public:
  using HasBits = decltype(std::declval<PMovement>()._impl_._has_bits_);
  static const ::Shooter::PClientId& id(const PMovement* msg);
  static const ::Shooter::PVector& loc(const PMovement* msg);
  static void set_has_loc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::Shooter::PRotator& rot(const PMovement* msg);
  static void set_has_rot(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::Shooter::PVector& vel(const PMovement* msg);
  static void set_has_vel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::Shooter::PClientId&
PMovement::_Internal::id(const PMovement* msg) {
  return *msg->_impl_.id_;
}
const ::Shooter::PVector&
PMovement::_Internal::loc(const PMovement* msg) {
  return *msg->_impl_.loc_;
}
const ::Shooter::PRotator&
PMovement::_Internal::rot(const PMovement* msg) {
  return *msg->_impl_.rot_;
}
const ::Shooter::PVector&
PMovement::_Internal::vel(const PMovement* msg) {
  return *msg->_impl_.vel_;
}
PMovement::PMovement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Shooter.PMovement)
}
PMovement::PMovement(const PMovement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PMovement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.loc_){nullptr}
    , decltype(_impl_.rot_){nullptr}
    , decltype(_impl_.vel_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    _this->_impl_.id_ = new ::Shooter::PClientId(*from._impl_.id_);
  }
  if (from._internal_has_loc()) {
    _this->_impl_.loc_ = new ::Shooter::PVector(*from._impl_.loc_);
  }
  if (from._internal_has_rot()) {
    _this->_impl_.rot_ = new ::Shooter::PRotator(*from._impl_.rot_);
  }
  if (from._internal_has_vel()) {
    _this->_impl_.vel_ = new ::Shooter::PVector(*from._impl_.vel_);
  }
  // @@protoc_insertion_point(copy_constructor:Shooter.PMovement)
}

inline void PMovement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.loc_){nullptr}
    , decltype(_impl_.rot_){nullptr}
    , decltype(_impl_.vel_){nullptr}
  };
}

PMovement::~PMovement() {
  // @@protoc_insertion_point(destructor:Shooter.PMovement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PMovement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.id_;
  if (this != internal_default_instance()) delete _impl_.loc_;
  if (this != internal_default_instance()) delete _impl_.rot_;
  if (this != internal_default_instance()) delete _impl_.vel_;
}

void PMovement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PMovement::Clear() {
// @@protoc_insertion_point(message_clear_start:Shooter.PMovement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.id_ != nullptr) {
    delete _impl_.id_;
  }
  _impl_.id_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.loc_ != nullptr);
      _impl_.loc_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.rot_ != nullptr);
      _impl_.rot_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.vel_ != nullptr);
      _impl_.vel_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PMovement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Shooter.PClientId Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Shooter.PVector Loc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_loc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Shooter.PRotator Rot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rot(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .Shooter.PVector Vel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_vel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PMovement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Shooter.PMovement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Shooter.PClientId Id = 1;
  if (this->_internal_has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // optional .Shooter.PVector Loc = 2;
  if (_internal_has_loc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::loc(this),
        _Internal::loc(this).GetCachedSize(), target, stream);
  }

  // optional .Shooter.PRotator Rot = 3;
  if (_internal_has_rot()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rot(this),
        _Internal::rot(this).GetCachedSize(), target, stream);
  }

  // optional .Shooter.PVector Vel = 4;
  if (_internal_has_vel()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::vel(this),
        _Internal::vel(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Shooter.PMovement)
  return target;
}

size_t PMovement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Shooter.PMovement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Shooter.PClientId Id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.id_);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .Shooter.PVector Loc = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.loc_);
    }

    // optional .Shooter.PRotator Rot = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rot_);
    }

    // optional .Shooter.PVector Vel = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.vel_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PMovement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PMovement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PMovement::GetClassData() const { return &_class_data_; }


void PMovement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PMovement*>(&to_msg);
  auto& from = static_cast<const PMovement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Shooter.PMovement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _this->_internal_mutable_id()->::Shooter::PClientId::MergeFrom(
        from._internal_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_loc()->::Shooter::PVector::MergeFrom(
          from._internal_loc());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_rot()->::Shooter::PRotator::MergeFrom(
          from._internal_rot());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_vel()->::Shooter::PVector::MergeFrom(
          from._internal_vel());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PMovement::CopyFrom(const PMovement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Shooter.PMovement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PMovement::IsInitialized() const {
  return true;
}

void PMovement::InternalSwap(PMovement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PMovement, _impl_.vel_)
      + sizeof(PMovement::_impl_.vel_)
      - PROTOBUF_FIELD_OFFSET(PMovement, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PMovement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ShooterProtocol_2eproto_getter, &descriptor_table_ShooterProtocol_2eproto_once,
      file_level_metadata_ShooterProtocol_2eproto[6]);
}

// ===================================================================

class PAnimState::_Internal {
 public:
  using HasBits = decltype(std::declval<PAnimState>()._impl_._has_bits_);
  static const ::Shooter::PClientId& id(const PAnimState* msg);
  static void set_has_aimyaw(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_aimpitch(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::Shooter::PClientId&
PAnimState::_Internal::id(const PAnimState* msg) {
  return *msg->_impl_.id_;
}
PAnimState::PAnimState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Shooter.PAnimState)
}
PAnimState::PAnimState(const PAnimState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PAnimState* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.aimyaw_){}
    , decltype(_impl_.aimpitch_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_id()) {
    _this->_impl_.id_ = new ::Shooter::PClientId(*from._impl_.id_);
  }
  ::memcpy(&_impl_.aimyaw_, &from._impl_.aimyaw_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.aimpitch_) -
    reinterpret_cast<char*>(&_impl_.aimyaw_)) + sizeof(_impl_.aimpitch_));
  // @@protoc_insertion_point(copy_constructor:Shooter.PAnimState)
}

inline void PAnimState::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.id_){nullptr}
    , decltype(_impl_.aimyaw_){0}
    , decltype(_impl_.aimpitch_){0}
  };
}

PAnimState::~PAnimState() {
  // @@protoc_insertion_point(destructor:Shooter.PAnimState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PAnimState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.id_;
}

void PAnimState::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PAnimState::Clear() {
// @@protoc_insertion_point(message_clear_start:Shooter.PAnimState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.id_ != nullptr) {
    delete _impl_.id_;
  }
  _impl_.id_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.aimyaw_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.aimpitch_) -
        reinterpret_cast<char*>(&_impl_.aimyaw_)) + sizeof(_impl_.aimpitch_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PAnimState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Shooter.PClientId Id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float AimYaw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _Internal::set_has_aimyaw(&has_bits);
          _impl_.aimyaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float AimPitch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_aimpitch(&has_bits);
          _impl_.aimpitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PAnimState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Shooter.PAnimState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Shooter.PClientId Id = 1;
  if (this->_internal_has_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::id(this),
        _Internal::id(this).GetCachedSize(), target, stream);
  }

  // optional float AimYaw = 2;
  if (_internal_has_aimyaw()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_aimyaw(), target);
  }

  // optional float AimPitch = 3;
  if (_internal_has_aimpitch()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_aimpitch(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Shooter.PAnimState)
  return target;
}

size_t PAnimState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Shooter.PAnimState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Shooter.PClientId Id = 1;
  if (this->_internal_has_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.id_);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float AimYaw = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float AimPitch = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PAnimState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PAnimState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PAnimState::GetClassData() const { return &_class_data_; }


void PAnimState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PAnimState*>(&to_msg);
  auto& from = static_cast<const PAnimState&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Shooter.PAnimState)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_id()) {
    _this->_internal_mutable_id()->::Shooter::PClientId::MergeFrom(
        from._internal_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.aimyaw_ = from._impl_.aimyaw_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.aimpitch_ = from._impl_.aimpitch_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PAnimState::CopyFrom(const PAnimState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Shooter.PAnimState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PAnimState::IsInitialized() const {
  return true;
}

void PAnimState::InternalSwap(PAnimState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PAnimState, _impl_.aimpitch_)
      + sizeof(PAnimState::_impl_.aimpitch_)
      - PROTOBUF_FIELD_OFFSET(PAnimState, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PAnimState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_ShooterProtocol_2eproto_getter, &descriptor_table_ShooterProtocol_2eproto_once,
      file_level_metadata_ShooterProtocol_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Shooter
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Shooter::PVector*
Arena::CreateMaybeMessage< ::Shooter::PVector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Shooter::PVector >(arena);
}
template<> PROTOBUF_NOINLINE ::Shooter::PRotator*
Arena::CreateMaybeMessage< ::Shooter::PRotator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Shooter::PRotator >(arena);
}
template<> PROTOBUF_NOINLINE ::Shooter::PEquipment*
Arena::CreateMaybeMessage< ::Shooter::PEquipment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Shooter::PEquipment >(arena);
}
template<> PROTOBUF_NOINLINE ::Shooter::PWeapon*
Arena::CreateMaybeMessage< ::Shooter::PWeapon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Shooter::PWeapon >(arena);
}
template<> PROTOBUF_NOINLINE ::Shooter::PClientId*
Arena::CreateMaybeMessage< ::Shooter::PClientId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Shooter::PClientId >(arena);
}
template<> PROTOBUF_NOINLINE ::Shooter::PPawnStatus*
Arena::CreateMaybeMessage< ::Shooter::PPawnStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Shooter::PPawnStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::Shooter::PMovement*
Arena::CreateMaybeMessage< ::Shooter::PMovement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Shooter::PMovement >(arena);
}
template<> PROTOBUF_NOINLINE ::Shooter::PAnimState*
Arena::CreateMaybeMessage< ::Shooter::PAnimState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Shooter::PAnimState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
